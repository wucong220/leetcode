package leetCode;

import java.util.LinkedList;

public class P32LongestValidParenthese {
	/* 
	 * 这个问题的精髓所在，是有效括号和有效括号之间是否能连成更大的有效括号
	 * 比如'()((())'，这个串中就有两个独立的有效括号子串'()'和'(())'
	 * 而在'()(())(',这个传中就有一整个大的有效括号之间串'()(())'
	 */
    static public int longestValidParentheses(String s) {

    	int top = 0;
    	int max =0 ;
    	
        LinkedList<Integer[]> lsp = new LinkedList<>();
        for(int i = 0;i<s.length();i++){
        	if(s.charAt(i)=='('){
        		top++;
        	}
        	else if(s.charAt(i)==')'){
        		top--;
        		if(top==-1){
        			lsp.clear();
        			top=0;
        			continue;
        		}
        		
        		Integer[] sp=null;
        		if(lsp.isEmpty()){
        			sp = new Integer[]{2,top};
        		}
        		else{
        			sp = lsp.pop();
        			if(sp[1]==top+1){
	        			sp[0]+=2;
	        			sp[1]--;
	        			if(!lsp.isEmpty()){
							Integer[] osp = lsp.pop();
							if (osp[1].equals(sp[1])) {
								sp[0] += osp[0];
							} else {
								lsp.push(osp);
							}
	        			}
	        		}
        			else if(sp[1]==top){
        				sp[0]+=2;
        			}
        			else if(sp[1]<top){
        				lsp.push(sp);
        				sp = new Integer[]{2,top};
        			}
        		}
        		max = Math.max(sp[0], max);
        		lsp.push(sp);
        		
        	}
        }
        
    	return max;
    }
    
    public static void main(String[] args) {
		String input = "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()())))(())()())((((()())((())))((()))()())))()(()()()(()((()))()()()))()()()(()()((((())()(((()(((())((()))()((()(()))()())))))))))())()())(()()))((()()()()())))((()()((((()()))))(())())()()))))(())()(()))((((((()))(()()()()(())(()((()))(()(())(((()()))(()((((()((((()((((())(())))()(())))()))(()((((((((())()()((())((()())()))))())())()(((((()()(((((())()((()(((()))(()(()))(()(()())))())(()((((()((()(((((()()))((()(()((())()))))(()(()())((()((()((((())))(()())()))()())())()))))(())))(())()((())(()(()))))()())(((()(()(((((((((()(()()())))((()((()())())())(((((()(()))))()))()))))()())()(()(())))(()))))(()))(((()))))())))))(((())((())((((()((()))((())))()))(((()))())()))()()()((()()(()())(()))()()((()())))))())(()())(((())))))())(())()))()())())(()(()((())((()(()((())(()()()(()((()(((()(())()(((())))))()())))))(()((((()(()()))(((())(()))(()()))))(())()((()))()))()()))()((())(()())())())(()))(()()(())()(()((((()())(((())(()()())())(()()))())))(()((())(()()))))(()))((()()((((()())(()()))()())()())))()(()((((())())()(())()))()()(()(()))))))(((()()((()))(()((((()()((())))())())))()())))())))((())()()()))()((()((()))()()())))(())())(()(()(()(()))())()))(())((())()())(((()()(((())(()()))(()())(())))()))(((()()()())))())))(((()))())())())))(((()))()())())())))))()()()()(())))(()())))(()()())))()((((()()()((((()))()())))(()))()))))(()())()))(((((())()((())()))(()())()()()())()(((()(()(())))))(()(((()()))((((()()))()))(((())(()(()))()(())))()()(()))))()))))()())))()))((((((((()()())((()(()()()(((())())())))()()(())(())))()())()())))((()))((((())()()))(())(((())(()()(((((()()((()()(((()(()()(((())()))))()(()())(()((((()()())(((()))(())((())()))))())))))(()()()())))()))(())((()())()())()()))(())))((()))()()((()())()()))(()()(())()())(())))((()(((())))()))))((((()))((())())())()(())(()))((((((())()()(((((()))()())(((()(()(())()((()())))(((())(()(())))))(()(()(((()))(())((((())))((())((((((((()(((((()(())))((((((())(()((((()(())()()((())())())((((((((()))))(((())()))()()))(())(())()()())(()()((())(()))())(((())(()((())(())(())))))(()(()(()()(((()()()))())(()))(())())()(((()((())((()())()(((((()()(()))))(((())()()))(()(()(()(()((())))))))(())())()))()(()(()))))()()((((())()())(((())(()))((()())(()((())()()(())((((())))))(())())())(())(()()(()()))(((()((((())(((())))))(()()()()(((()((((())(()))((())()))()(((((((()(()())))(((";
		System.out.println(longestValidParentheses(input));
	}
}

class SubPString{
	int length;
	int depth;
	public  SubPString(int length,int depth){
		this.length = length;
		this.depth = depth;
	}
}